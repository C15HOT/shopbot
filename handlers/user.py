import os
from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton

from config import WELCOME_MESSAGE, ORDER_MESSAGE, SELLER_CONTACT, ADMIN_ID, GROUP
from keyboards.inline import get_categories_keyboard, get_products_keyboard, get_product_detail_keyboard
from utils.database import get_categories, get_products_by_category, get_product

router = Router()

def get_main_menu_keyboard(is_admin: bool = False):
    """Create main menu keyboard"""
    keyboard_buttons = [[KeyboardButton(text="üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤")]]
    keyboard_buttons.append([KeyboardButton(text="üì£ –û—Ç–∑—ã–≤—ã –æ –Ω–∞—Å")])

    if is_admin:
        keyboard_buttons.append([KeyboardButton(text="üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")])

    keyboard = ReplyKeyboardMarkup(
        keyboard=keyboard_buttons,
        resize_keyboard=True,
        persistent=True
    )
    return keyboard

@router.message(CommandStart())
async def start_command(message: Message):
    """Handle /start command"""
    categories_kb = await get_categories_keyboard()
    is_admin = message.from_user.id == ADMIN_ID
    main_menu = get_main_menu_keyboard(is_admin)

    if categories_kb:
        await message.answer(WELCOME_MESSAGE, reply_markup=categories_kb)
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –≤–Ω–∏–∑—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞:", reply_markup=main_menu)
    else:
        await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.", reply_markup=main_menu)

@router.message(F.text == "üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤")
async def show_catalog(message: Message):
    """Show catalog of products"""
    categories_kb = await get_categories_keyboard()
    if categories_kb:
        await message.answer(WELCOME_MESSAGE, reply_markup=categories_kb)
    else:
        await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

@router.message(F.text == "üì£ –û—Ç–∑—ã–≤—ã –æ –Ω–∞—Å")
async def return_link(message: Message):
    await message.answer(f"–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—à–∏ –æ—Ç–∑—ã–≤—ã: {GROUP}")

@router.message(F.text == "üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def admin_panel_shortcut(message: Message):
    """Shortcut to admin panel"""
    # Check if user is admin
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
        return

    from handlers.admin import admin_panel
    await admin_panel(message)

@router.callback_query(F.data.startswith("category_"))
async def show_category_products(callback: CallbackQuery):
    """Show products in selected category"""
    category_id = int(callback.data.split("_")[1])

    products_kb = await get_products_keyboard(category_id)
    categories = await get_categories()
    category_name = next((cat["name"] for cat in categories if cat["id"] == category_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")

    if products_kb:
        await callback.message.edit_text(
            f"üõçÔ∏è –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category_name}</b>:\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
            reply_markup=products_kb,
            parse_mode="HTML"
        )
    else:
        await callback.message.edit_text(
            f"‚ùå –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category_name}</b> –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.",
            reply_markup=await get_categories_keyboard(),
            parse_mode="HTML"
        )

    await callback.answer()

@router.callback_query(F.data.startswith("product_"))
async def show_product_detail(callback: CallbackQuery):
    """Show product details"""
    from aiogram.types import InputFile, FSInputFile
    
    product_id = int(callback.data.split("_")[1])
    product = await get_product(product_id)

    if not product:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    product_text = f"""
üõçÔ∏è <b>{product['name']}</b>

üìù {product['description']}

üí∞ –¶–µ–Ω–∞: <b>{product['price']} —Ä—É–±.</b>
"""
    
    keyboard = get_product_detail_keyboard(product_id, product['category_id'])
    
    # Show image if available
    if product.get('image_path') and os.path.exists(product['image_path']):
        try:
            photo = FSInputFile(product['image_path'])
            await callback.message.answer_photo(
                photo=photo, 
                caption=product_text, 
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        except Exception as e:
            # If image fails to load, send text message
            await callback.message.answer(
                product_text + "\n\nüñºÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", 
                reply_markup=keyboard,
                parse_mode="HTML"
            )
    else:
        # No image or image not found
        await callback.message.answer(
            product_text, 
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    await callback.answer()

@router.callback_query(F.data.startswith("order_"))
async def make_order(callback: CallbackQuery):
    """Show seller contact for ordering"""
    product_id = int(callback.data.split("_")[1])
    product = await get_product(product_id)

    if not product:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    order_text = ORDER_MESSAGE.format(contact=SELLER_CONTACT)
    order_text += f"\n\nüõçÔ∏è –¢–æ–≤–∞—Ä: <b>{product['name']}</b>"

    await callback.message.answer(order_text, parse_mode="HTML")
    await callback.answer("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

@router.callback_query(F.data == "back_to_categories")
async def back_to_categories(callback: CallbackQuery):
    """Return to categories menu"""
    categories_kb = await get_categories_keyboard()

    try:
        if categories_kb:
            if callback.message.photo:
                # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
                try:
                    await callback.message.delete()
                except Exception as delete_err:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Ñ–æ—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ back_to_categories: {delete_err}")
                    pass

                await callback.message.answer(
                    text=WELCOME_MESSAGE, # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ WELCOME_MESSAGE - —ç—Ç–æ –≤–∞—à–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞
                    reply_markup=categories_kb,
                    parse_mode="HTML" # –ò–ª–∏ –∫–∞–∫ –≤—ã —Ç–∞–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç–µ WELCOME_MESSAGE
                )
            elif callback.message.text:
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω —É–∂–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π.
                await callback.message.edit_text(
                    text=WELCOME_MESSAGE,
                    reply_markup=categories_kb,
                    parse_mode="HTML"
                )
            else:
                # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ, —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.
                try:
                    await callback.message.delete()
                except Exception as delete_err:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ back_to_categories: {delete_err}")
                    pass

                await callback.message.answer(
                    text=WELCOME_MESSAGE,
                    reply_markup=categories_kb,
                    parse_mode="HTML"
                )
        else:
            # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç, –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Ñ–æ—Ç–æ
            if callback.message.photo:
                try:
                    await callback.message.delete()
                except Exception as delete_err:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Ñ–æ—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ back_to_categories (no categories): {delete_err}")
                    pass

                await callback.message.answer(
                    text="‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.",
                    reply_markup=await get_categories_keyboard(), # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—É—Å—Ç–∞, –Ω–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å
                    parse_mode="HTML"
                )
            elif callback.message.text:
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç.
                await callback.message.edit_text(
                    text="‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.",
                    reply_markup=await get_categories_keyboard(),
                    parse_mode="HTML"
                )
            else:
                # –£–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.
                try:
                    await callback.message.delete()
                except Exception as delete_err:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ back_to_categories (no categories): {delete_err}")
                    pass

                await callback.message.answer(
                    text="‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.",
                    reply_markup=await get_categories_keyboard(),
                    parse_mode="HTML"
                )

        # await callback.answer() # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –±—ã–ª–∞ –¥–≤–∞–∂–¥—ã, —É–±—Ä–∞–ª –æ–¥–Ω—É

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ back_to_categories: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º!", show_alert=True)
    finally:
        # –í–∞–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å callback.answer() –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "loading"
        await callback.answer()


@router.callback_query(F.data.startswith("back_to_category_"))
async def back_to_category(callback: CallbackQuery):
    """Return to category products"""
    try:
        category_id = int(callback.data.split("_")[3])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏!", show_alert=True)
        return

    products_kb = await get_products_keyboard(category_id)
    categories = await get_categories()
    category_name = next((cat["name"] for cat in categories if cat["id"] == category_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")

    message_text = f"üõçÔ∏è –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category_name}</b>:\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:"
    no_products_text = f"‚ùå –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category_name}</b> –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤."

    try:
        if products_kb: # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã –µ—Å—Ç—å –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞
            if callback.message.photo:
                # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Å —Ñ–æ—Ç–æ, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç.
                try:
                    await callback.message.delete()
                except Exception as delete_err:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Ñ–æ—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ back_to_category: {delete_err}")
                    pass # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –¥–∞–∂–µ –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å

                await callback.message.answer(
                    text=message_text,
                    reply_markup=products_kb,
                    parse_mode="HTML"
                )
            elif callback.message.text:
                # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Ç–µ–∫—Å—Ç–æ–º, –±–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º.
                await callback.message.edit_text(
                    text=message_text,
                    reply_markup=products_kb,
                    parse_mode="HTML"
                )
            else:
                # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —á–µ–º-—Ç–æ –¥—Ä—É–≥–∏–º, —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.
                try:
                    await callback.message.delete()
                except Exception as delete_err:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ back_to_category: {delete_err}")
                    pass

                await callback.message.answer(
                    text=message_text,
                    reply_markup=products_kb,
                    parse_mode="HTML"
                )
        else: # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç
            if callback.message.photo:
                # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
                try:
                    await callback.message.delete()
                except Exception as delete_err:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Ñ–æ—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ back_to_category (no products): {delete_err}")
                    pass

                await callback.message.answer(
                    text=no_products_text,
                    reply_markup=await get_categories_keyboard(), # –ù—É–∂–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                    parse_mode="HTML"
                )
            elif callback.message.text:
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω —É–∂–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π.
                await callback.message.edit_text(
                    text=no_products_text,
                    reply_markup=await get_categories_keyboard(),
                    parse_mode="HTML"
                )
            else:
                # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ, —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.
                try:
                    await callback.message.delete()
                except Exception as delete_err:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ back_to_category (no products): {delete_err}")
                    pass

                await callback.message.answer(
                    text=no_products_text,
                    reply_markup=await get_categories_keyboard(),
                    parse_mode="HTML"
                )

        await callback.answer()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ back_to_category ({callback.data}): {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Ç–æ–≤–∞—Ä–∞–º!", show_alert=True)